# This is the Gateway implemented using Envoy. This is where the inbound
# traffic gets handled. In addition to Envoy, we also deploy "che-envoy-control" - 
# an additional pod that serves the dynamic configuration for Envoy. This is supposed
# to be part of the Che server itself once implemented.
kind: Pod
apiVersion: v1
metadata:
  name: che-gateway
  labels:
    app: che-gateway 
spec:
  containers:
  - name: envoy
    image: envoyproxy/envoy:v1.14.1
    volumeMounts:
    - name: config
      mountPath: /etc/envoy
  volumes:
  - name: config
    configMap:
      name: envoy-config
---
  kind: Pod
  apiVersion: v1
  metadata:
    name: che-envoy-control
    labels:
      app: che-envoy-control 
  spec:
    containers:
    - name: envoy-control
      image: quay.io/lkrejci/che-envoy-control:latest
      # the "che_service" is the name of the cluster in envoy config that points to the che server pod.
      command: ["java", "-jar", "che-envoy.jar", "/backends/workspaces.csv", "che_service"]
      volumeMounts:
      - name: config
        mountPath: /backends
    volumes:
    - name: config
      configMap:
        name: gateway-workspaces
---
  kind: Service
  apiVersion: v1
  metadata:
    name: che-envoy-control
  spec:
    selector:
      app: che-envoy-control
    ports:
    - port: 12345
      targetPort: 12345
      protocol: TCP
---
# This is the main configuration for Envoy. It contains the configuration to route the traffic from
# '/' to the che server and pointer to the dynamic configuration which will configure it for 
# serving workspaces.
kind: ConfigMap
apiVersion: v1
metadata:
  name: envoy-config
  labels:
    che-config-role: gateway
data:
  envoy.yaml: |
    node:
      id: envoy
      cluster: envoy

    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901

    dynamic_resources:
      cds_config:
        api_config_source:
          api_type: GRPC
          grpc_services:
            envoy_grpc:
              cluster_name: che_xds
    
    static_resources:
      listeners:
        - name: all_workspaces
          address:
            socket_address: { address: 0.0.0.0, port_value: 8080 }
          filter_chains:
            - filters:
              - name: workspaces
                typed_config:
                  "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                  stat_prefix: workspaces_http
                  codec_type: AUTO
                  rds:
                    route_config_name: backends
                    config_source:
                      api_config_source:
                        api_type: GRPC
                        grpc_services:
                          envoy_grpc:
                            cluster_name: che_xds
                  http_filters:
                    - name: envoy.filters.http.router
      clusters:
        - name: che_service
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: che_service
            endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: che
                        port_value: 80
              
        # We need to tell envoy statically where to find our management server. This is then referenced in the
        # dynamically configured portions of the config.
        - name: che_xds
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          upstream_connection_options:
            # configure a TCP keep-alive to detect and reconnect to the admin
            # server in the event of a TCP socket half open connection
            tcp_keepalive: {}
          load_assignment:
            cluster_name: che_xds
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: che-envoy-control
                          port_value: 12345
# ---
# # expose Envoy's admin interface for debugging purposes  
# apiVersion: v1
# kind: Service
# metadata:
#   name: envoy-admin
# spec:
#   selector:
#     app: che-gateway
#   ports:
#   - port: 80
#     targetPort: 9901
#     protocol: TCP
# ---
# apiVersion: route.openshift.io/v1
# kind: Route
# metadata:
#   name: envoy-admin
# spec:
#   host: envoy-admin-lkrejci-singlehostpoc.apps-crc.testing
#   to:
#     kind: Service
#     name: envoy-admin
